{"version":3,"sources":["pages/auction/DemoCard.js"],"names":["DemoCard","_useState","useState","_useState2","_slicedToArray","startIndex","setStartIndex","_useState3","_useState4","endIndex","setEndIndex","useEffect","socket","io","connect","process","on","handleVisibilityChange","document","hidden","emit","addEventListener","timer","setInterval","disconnect","removeEventListener","clearInterval","_jsxs","children"],"mappings":"oKAmDeA,UAhDE,WAAO,IAADC,EACeC,mBAAS,GAAEC,EAAAC,YAAAH,EAAA,GAAxCI,EAAUF,EAAA,GAAEG,EAAaH,EAAA,GAAAI,EACAL,mBAAS,GAAEM,EAAAJ,YAAAG,EAAA,GAApCE,EAAQD,EAAA,GAAEE,EAAWF,EAAA,GAqC5B,OAnCAG,qBAAU,WACR,IAAMC,EAASC,IAAGC,QAAQC,4BAE1BH,EAAOI,GAAG,WAAW,SAACX,GACpBC,EAAcD,MAIhBO,EAAOI,GAAG,SAAS,SAACP,GAClBC,EAAYD,MAId,IAAMQ,EAAyB,WACxBC,SAASC,QAEZP,EAAOQ,KAAK,gBAIhBF,SAASG,iBAAiB,mBAAoBJ,GAG9C,IAAMK,EAAQC,aAAY,WACxBX,EAAOQ,KAAK,iBACX,KAGH,OAAO,WACLR,EAAOY,aACPN,SAASO,oBAAoB,mBAAoBR,GACjDS,cAAcJ,MAEf,IAGDK,eAAA,OAAAC,SAAA,CACED,eAAA,KAAAC,SAAA,CAAG,gBAAcvB,KACjBsB,eAAA,KAAAC,SAAA,CAAG,cAAYnB","file":"static/js/13.beaa318e.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport io from 'socket.io-client';\r\n\r\nconst DemoCard = () => {\r\n  const [startIndex, setStartIndex] = useState(0);\r\n  const [endIndex, setEndIndex] = useState(0);\r\n\r\n  useEffect(() => {\r\n    const socket = io.connect(process.env.REACT_APP_SERVER_URL);\r\n    // Listen for 'startIn' event\r\n    socket.on('startIn', (startIndex) => {\r\n      setStartIndex(startIndex);\r\n    });\r\n\r\n    // Listen for 'endIn' event\r\n    socket.on('endIn', (endIndex) => {\r\n      setEndIndex(endIndex);\r\n    });\r\n\r\n    // Listen for 'visibilitychange' event to handle page visibility changes\r\n    const handleVisibilityChange = () => {\r\n      if (!document.hidden) {\r\n        // Page is visible, request the updated 'endIndex' value\r\n        socket.emit('getEndIndex');\r\n      }\r\n    };\r\n\r\n    document.addEventListener('visibilitychange', handleVisibilityChange);\r\n\r\n    // Set up a timer to periodically request the updated 'endIndex' value\r\n    const timer = setInterval(() => {\r\n      socket.emit('getEndIndex');\r\n    }, 5000); // Adjust the interval as needed\r\n\r\n    // Clean up the socket connection and event listener when the component unmounts\r\n    return () => {\r\n      socket.disconnect();\r\n      document.removeEventListener('visibilitychange', handleVisibilityChange);\r\n      clearInterval(timer);\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <p>Start Index: {startIndex}</p>\r\n      <p>End Index: {endIndex}</p>\r\n      {/* Rest of your component code */}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DemoCard;\r\n"],"sourceRoot":""}